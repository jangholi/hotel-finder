{"version":3,"sources":["img/home_icon-active.svg","img/home_icon-default.svg","img/limehome_logo.svg","img/burger_icon.svg","components/marker/Marker.tsx","components/card/Card.tsx","components/modal/Modal.tsx","components/lane/Lane.tsx","apis/map.js","utils/HttpClient/index.js","components/map/Map.tsx","layouts/header/Header.tsx","layouts/default-layout.tsx","app.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","Marker","props","onClick","cb","id","className","isMarkerClicked","length","active","src","activeMarker","defaultMarker","alt","Card","Props","key","hotel","title","distance","toFixed","Math","floor","random","vicinity","toggleModal","FormModal","hidden","show","htmlFor","type","placeholder","name","required","toggle","Lane","sliderRef","React","createRef","setState","showModal","state","windowWidth","window","innerWidth","updateDimensions","bind","addEventListener","this","removeEventListener","cards","cardNum","currentSlide","hotels","findIndex","settings","dots","infinite","slidesToShow","arrows","focusOnSelect","initialSlide","draggable","centerMode","centerPadding","swipe","current","slickGoTo","ref","map","Component","client","baseURL","process","REACT_APP_BASE_URL","REACT_APP_PATH","_baseURL","method","url","data","params","Axios","request","headers","Map","handleApiLoaded","maps","setMapBounds","addListener","top","getBounds","getNorthEast","lat","right","lng","bottom","getSouthWest","left","getMarkerData","apiKey","in","cat","then","res","deepClone","results","items","sort","prev","next","forEach","index","handleMarkerClick","prevMarkerId","newState","center","bounds","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","bootstrapURLKeys","zoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","options","disableDefaultUI","text","Header","fixNav","header","document","querySelector","topOfNav","HTMLElement","offsetTop","scrollY","classList","add","remove","logo","burgerIcon","DefaultLayout","children","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71ebd75c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home_icon-active.a0fbf9bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/home_icon-default.f973800a.svg\";","module.exports = __webpack_public_path__ + \"static/media/limehome_logo.202fcb30.svg\";","module.exports = __webpack_public_path__ + \"static/media/burger_icon.079652e9.svg\";","import React from 'react';\nimport './Marker.css';\nimport activeMarker from '../../img/home_icon-active.svg';\nimport defaultMarker from '../../img/home_icon-default.svg';\n\ninterface Props {\n  id: string,\n  isMarkerClicked: string,\n  active: boolean,\n  cb: Function\n  text: string,\n  lat: number,\n  lng: number\n};\n\nfunction Marker(props: Props) {\n  return (\n      <div onClick={() => props.cb(props.id)}>\n        <img className={props.isMarkerClicked.length > 0 && props.active ? 'active' : 'inactive'}\n             src={props.active ? activeMarker: defaultMarker}\n             alt='Marker'/>\n      </div>\n  );\n}\n\nexport default Marker;","import React from 'react';\nimport './Card.css';\n\ninterface Props {\n    hotel: {\n        id: string,\n        title: string,\n        distance: number,\n        vicinity: string,\n        active: boolean\n    };\n    toggleModal: (event: React.MouseEvent<HTMLButtonElement>) => void\n};\n\nfunction Card(Props: Props) {\n\n    return (\n        <div className='hotel_cards-item' key={Props.hotel.id}>\n            <div className='hotel_card-content'>\n                <div className='hotel_card-details'>\n                    <div className='hotel_card-details--photo'>\n                        <img src='https://via.placeholder.com/200x300' alt='Hotel'></img>\n                    </div>\n                    <div className='hotel_card-details--info'>\n                        <h3 className='info_title'> {Props.hotel.title} </h3>\n                        <p className='info_distance'>{(Props.hotel.distance/1000).toFixed(1)} km from the city center</p>\n                        <p className='info_price'>${Math.floor(Math.random() * 90 + 10)}</p>\n                        <p className='info_desc'>{Props.hotel.vicinity}</p>\n                    </div>\n                </div>\n                <div className='hotel_card-control'>\n                    <button className='card_button' onClick={Props.toggleModal}>Book</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport './Modal.css'\n\ninterface Props {\n    show: boolean,\n    toggle: () => void;\n};\n\nfunction FormModal(props: Props) {\n    return (\n        <div className=\"modal\"  hidden={!props.show}>\n            <form className=\"form-modal\">\n                <label htmlFor=\"txt\" className='full-width'>\n                    <b>Name</b>\n                </label>\n                <input type=\"text\" placeholder=\"Enter Name\" name=\"txt\" required/>\n\n                <label htmlFor=\"email\">\n                    <b>Email</b>\n                </label>\n                <input type=\"email\" placeholder=\"Enter Email\" name=\"email\" required/>\n\n                <label htmlFor=\"tel\"><b>Phone</b></label>\n                <input type=\"tel\" placeholder=\"Enter Phone\" name=\"tel\" required/>\n\n                <label htmlFor=\"date\"><b>Check-in</b></label>\n                <input type=\"date\" placeholder=\"Enter Phone\" name=\"date\" required/>\n\n                <label htmlFor=\"date\"><b>Check-out</b></label>\n                <input type=\"date\" placeholder=\"Enter Phone\" name=\"date\" required/>\n\n                <button type=\"submit\" className='btn submit-form-btn'>Submit</button>\n                <button type=\"button\" className=\"btn close-form-btn\" onClick={props.toggle}>Close</button>\n            </form>\n        </div>\n    )\n}\n\nexport default FormModal","import React from 'react';\nimport './Lane.css';\nimport Card from '../card/Card';\nimport SlickSlider from \"react-slick\";\nimport Modal from '../modal/Modal'\n\ninterface Props {\n    hotels: Array<Hotel>;\n};\ninterface Hotel {\n    id: string,\n    title: string,\n    distance: number,\n    vicinity: string,\n    active: boolean\n}\n\ninterface State {\n    windowWidth: number;\n    showModal: boolean\n};\n\nclass Lane extends React.Component <Props, State> {\n    private sliderRef = React.createRef<any>();\n\n    constructor(props: any){\n        super(props);\n        this.state = {\n            windowWidth: window.innerWidth,\n            showModal: false\n        };\n        this.updateDimensions = this.updateDimensions.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.updateDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n\n    updateDimensions() {\n        this.setState({windowWidth: window.innerWidth})\n    }\n\n    toggle = () => {\n        this.setState({\n            showModal: !this.state.showModal\n        })\n    }\n\n    render() {\n\n        const cardWidth = 280;\n        const cards = Math.floor((this.state.windowWidth - 100) / cardWidth);\n        const cardNum = cards < 1 ? 1 : cards;\n        const currentSlide = this.props.hotels.findIndex(hotel => hotel.active);\n        const settings = {\n            dots: false,\n            infinite: true,\n            slidesToShow: cardNum,\n            arrows: false,\n            focusOnSelect: false,\n            initialSlide: currentSlide,\n            draggable: false,\n            centerMode: true,\n            centerPadding: '15px',\n            swipe: false\n        };\n\n        if (this.sliderRef && this.sliderRef.current) this.sliderRef.current.slickGoTo(currentSlide);\n\n        return (\n            <div className='hotel_cards'>\n                <SlickSlider {...settings} ref={this.sliderRef}  >\n                    {this.props.hotels.map((hotel) =>\n                        <Card key={hotel.id} hotel={hotel} toggleModal={this.toggle}/>\n                    )}\n                </SlickSlider>\n                <Modal  show={this.state.showModal} toggle = {this.toggle} />\n            </div>\n        );\n    }\n}\n\nexport default Lane;","/** @API Auth API **/\n\nimport HttpClient from \"../utils/HttpClient\";\nconst client = new HttpClient('https://places.ls.hereapi.com/');\n\n/**\n * Logout user\n * @returns {Promise<AxiosResponse<*>>}\n */\nexport const getMarkerData = (params) => client.request('GET', 'places/v1/discover/explore', null, params);\n\n\n\n\n\n// export function getData(data){\n//     return fetch(`https://places.ls.hereapi.com/places/v1/discover/explore?apiKey=${'yJM5qjqhQ1HUFvfPa7ya8ft1eSt5OTDzwjd8dsw04ck'}&in=${data}&cat=${'hotel'}`, {\n//         method: 'GET',\n//         headers: {\n//             'Content-Type':'application/json'\n//         }\n//     })\n//         .then((response) => response.json())\n//         .catch((err) => console.log(err));\n// }","import Axios from 'axios';\n\n/**\n * HTTP Client\n */\nexport class HttpClient {\n    /**\n     * set base url\n     * @param baseURL {string} base url\n     */\n    constructor(baseURL = process.env.REACT_APP_BASE_URL + process.env.REACT_APP_PATH) {\n        this._baseURL = baseURL;\n    }\n\n    // TODO: Check token before send\n    // TODO: Check auth before send\n    /**\n     * make a request by axios\n     * @param method {string} ['POST'|'GET'|'PUT'|'PATCH'|'DELETE']\n     * @param url {string}\n     * @param data {object}\n     * @param params {object}\n     * @param auth {object}\n     * @returns {Promise<AxiosResponse<any>>}\n     */\n    request(method, url, data, params) {\n\n        return Axios.request({\n            baseURL: this._baseURL,\n            method,\n            url,\n            data,\n            params,\n            headers: {\n                'Content-Type':'application/json'\n            }\n        });\n\n    }\n}\n\nexport default HttpClient;","import React from 'react';\nimport './Map.css';\nimport GoogleMap from 'google-map-react';\nimport Marker from '../marker/Marker';\nimport Lane from '../lane/Lane';\nimport deepClone from 'lodash.clonedeep';\nimport {getMarkerData} from '../../apis/map'\n\ninterface State {\n    hotels: Array<Hotel>,\n    center: Center,\n    bounds: Bounds,\n    isMarkerClicked: string,\n    prevMarkerId: string\n}\ninterface Hotel {\n    distance: number,\n    title: string,\n    icon: string,\n    vicinity: string,\n    type: string,\n    href: string,\n    id: string,\n    position: Array<number>,\n    active: boolean\n}\ninterface Position {\n    coords: Coords\n}\ninterface Coords {\n    latitude: number,\n    longitude: number\n}\ninterface Center {\n    lat: number,\n    lng: number\n}\ninterface Bounds {\n    top: string,\n    right: string,\n    bottom: string,\n    left: string\n}\n\nclass Map extends React.Component <any, State, Position> {\n    constructor(props: any){\n        super(props);\n        this.state = {\n            center: {\n                lat: 52.520008,\n                lng: 13.404954\n            },\n            bounds: {\n                top:'',\n                right:'',\n                bottom: '',\n                left: ''\n            },\n            hotels: [],\n            isMarkerClicked: '',\n            prevMarkerId: ''\n        };\n    }\n    componentDidMount() {\n        navigator\n            .geolocation\n            .getCurrentPosition(function(this: any, position: Position) {\n                    this.setState({center: {lat: position.coords.latitude, lng: position.coords.longitude}})\n            }.bind(this));\n    }\n\n    handleApiLoaded = (map: any, maps: any) => {\n\n        this.setMapBounds(map);\n\n        map.addListener('bounds_changed', function(this: any) {\n            if (!this.state.isMarkerClicked) this.setMapBounds(map);\n        }.bind(this));\n\n        map.addListener('zoom_changed', function(this: any) {\n            if (!this.state.isMarkerClicked) this.setMapBounds(map);\n        }.bind(this));\n    }\n\n    setMapBounds = (map: any) => {\n\n        const top = map.getBounds().getNorthEast().lat();\n        const right = map.getBounds().getNorthEast().lng();\n        const bottom = map.getBounds().getSouthWest().lat();\n        const left = map.getBounds().getSouthWest().lng();\n\n        var params = {\n            apiKey: 'yJM5qjqhQ1HUFvfPa7ya8ft1eSt5OTDzwjd8dsw04ck',\n            in: `${left},${bottom},${right},${top}`,\n            cat: 'hotel'\n        }\n        getMarkerData(params)\n            .then((res) => {\n                const hotels:Array<Hotel> = deepClone(res.data?.results?.items);\n\n                hotels\n                    .sort((prev, next) => prev.distance > next.distance ? 1 : -1)\n                    .forEach((hotel, index) => {\n                        (this.state.isMarkerClicked.length === 0 && index === 0) || (this.state.isMarkerClicked.length > 0 && this.state.isMarkerClicked === hotel.id) ? hotel.active = true : hotel.active = false\n                    });\n\n                this.setState({hotels: hotels});\n            })\n    }\n\n    handleMarkerClick = (id:string) => {\n        let isMarkerClicked = '';\n\n        if (!(this.state.prevMarkerId === id && this.state.isMarkerClicked.length > 0)) isMarkerClicked = id;\n\n        const newState = deepClone(this.state);\n\n        let hotels:Array<Hotel> = newState.hotels;\n\n        hotels.forEach((hotel) => hotel.id === id ? hotel.active = true : hotel.active = false);\n\n        this.setState({hotels: newState.hotels, prevMarkerId: id, isMarkerClicked: isMarkerClicked});\n    }\n\n    render() {\n        return (\n            <div className='map-holder'>\n                <div className='map'>\n                    <GoogleMap\n                        bootstrapURLKeys={{ key: 'AIzaSyCzNiw-oILSDrSZK8-O3tyya9mMqeDH0AE' }}\n                        center={{ lat: this.state.center.lat, lng: this.state.center.lng }}\n                        zoom={14}\n                        yesIWantToUseGoogleMapApiInternals\n                        onGoogleApiLoaded={({ map, maps }) => this.handleApiLoaded(map, maps)}\n                        options={{\n                            disableDefaultUI: true\n                        }}\n                    >\n                        {this.state.hotels.map((hotel) => (\n                            <Marker\n                                key={hotel.id}\n                                text={hotel.title}\n                                lat={hotel.position[0]}\n                                lng={hotel.position[1]}\n                                cb={this.handleMarkerClick}\n                                id={hotel.id}\n                                active={hotel.active}\n                                isMarkerClicked={this.state.isMarkerClicked}\n                            />\n                        ))}\n                    </GoogleMap>\n                </div>\n                <Lane hotels={this.state.hotels} />\n            </div>\n        );\n    }\n}\n\nexport default Map;","import React from 'react';\nimport './Header.css';\nimport logo from '../../img/limehome_logo.svg';\nimport burgerIcon from '../../img/burger_icon.svg';\n\nclass Header extends React.Component {\n    constructor(props: any) {\n        super(props);\n        this.fixNav = this.fixNav.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.fixNav);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.fixNav);\n    }\n\n    fixNav() {\n        const header = document.querySelector('.header');\n        let topOfNav:number = 0;\n        if (header instanceof HTMLElement) {topOfNav = header.offsetTop};\n\n        if (header && window.scrollY >= topOfNav) {\n            header.classList.add('fixed-header');\n        } else if (header) {\n            header.classList.remove('fixed-header');\n        }\n    }\n\n    render() {\n        return (\n            <header className='header'>\n                <nav className='header_nav'>\n                    <ul className='header_menu'>\n                        <li className='header_menu-item'>\n                            <img src={logo} alt='Logo'/>\n                        </li>\n                        <li className='header_menu-item'>\n                            <button>\n                                <img src={burgerIcon} alt='Menu button'/>\n                            </button>\n                        </li>\n                    </ul>\n                </nav>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport Header from './header/Header';\n\ninterface Props {\n    children: JSX.Element\n}\n\nlet DefaultLayout = ({children}: Props) => {\n   return(\n       <>\n            <Header />\n            <main>\n                {children}\n            </main>\n       </>\n   )\n}\n\nexport default DefaultLayout","import React from 'react';\nimport Map from 'components/map/Map';\nimport DefaultLayout from '../src/layouts/default-layout'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <DefaultLayout>\n                    <Map />\n                </DefaultLayout>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}